### Docker-composeとは、
# 複数のコンテナで構成されるアプリケーションについて、
# Dockerイメージのビルドや各コンテナの起動・停止などをより簡単に行えるようにするツール
# https://docs.docker.jp/compose/compose-file/index.html#

# composeのバージョン
version: "3.9"

# サービスコンテナの集まり
services:
    # プロジェクト名
    app:
        # コンテナ名
        container_name: laravel_sandbox
        # ソースからコンテナをbuildするための情報を指定
        build:
            #
            context: .
            # どのdockerFileを参照するか
            dockerfile: ./.docker/php/Dockerfile
        # コンテナの作業ディレクトリを上書きする
        working_dir: /app
        # コンテナのポートを後悔する　[ホスト:コンテナ]
        ports:
            - "9000:9000"
        # コンテナイメージによって宣言済みのデフォルトコマンドを上書きする。
#        command: >
#            php artisan serve --host=0.0.0.0
        # サービスコンテナがアクセスできるようにする必要があるホスト上のパスか名前付きボリュームを定義する
        ## volumesとは
        # Dockerのコンテナ内で作成したデータを永続するための場所
        # コンテナに保存したデータはコンテナを破棄すると消える
        # volumesに保存したデータはコンテナを破棄しても残り再利用できる。
        volumes:
            -   .:/app
            -   ./.docker/php/php.ihi:/usr/local/etc/php/conf.d/php.ini
        depends_on:
            -   mysql
    nginx:
        container_name: laravel_sandbox_nginx
        build:
            context: .
            dockerfile: ./.docker/nginx/Dockerfile
        ports:
            - "80:80"
        volumes:
            - ./public:/app/public
            - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf
        depends_on:
            - app
    mysql:
        container_name: laravel_sandbox_mysql
        image: mysql:8.0.23
        environment:
            MYSQL_DATABASE: $DB_DATABASE
            MYSQL_USER: $DB_USERNAME
            MYSQL_PASSWORD: $DB_PASSWORD
            MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
        volumes:
            - ./.docker/mysql/data:/var/lib/mysql/
            - ./.docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
            - ./.docker/mysql/logs:/var/log/mysql
        ports:
            - "3306:3306"
